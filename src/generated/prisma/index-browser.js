
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  phone: 'phone',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  situation: 'situation',
  type: 'type',
  properties: 'properties',
  office: 'office',
  organization: 'organization',
  service: 'service',
  function: 'function'
};

exports.Prisma.CaseScalarFieldEnum = {
  id: 'id',
  reference: 'reference',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  stage: 'stage',
  urgency: 'urgency',
  debtAmount: 'debtAmount',
  description: 'description',
  landlordId: 'landlordId',
  tenantId: 'tenantId',
  officerId: 'officerId',
  mediatorId: 'mediatorId',
  socialWorkerId: 'socialWorkerId',
  housingType: 'housingType',
  housingArea: 'housingArea',
  rent: 'rent',
  charges: 'charges',
  deposit: 'deposit',
  leaseStartDate: 'leaseStartDate',
  leaseType: 'leaseType',
  leaseDuration: 'leaseDuration',
  address: 'address'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  filePath: 'filePath',
  uploadedAt: 'uploadedAt',
  caseId: 'caseId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  createdAt: 'createdAt',
  read: 'read',
  userId: 'userId',
  caseId: 'caseId'
};

exports.Prisma.MediationRequestScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  reason: 'reason',
  proposal: 'proposal',
  requesterId: 'requesterId',
  mediatorId: 'mediatorId',
  caseId: 'caseId'
};

exports.Prisma.MediationMeetingScalarFieldEnum = {
  id: 'id',
  date: 'date',
  location: 'location',
  videoLink: 'videoLink',
  status: 'status',
  notes: 'notes',
  mediationId: 'mediationId'
};

exports.Prisma.CaseEventScalarFieldEnum = {
  id: 'id',
  date: 'date',
  type: 'type',
  description: 'description',
  actor: 'actor',
  caseId: 'caseId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  TENANT: 'TENANT',
  LANDLORD: 'LANDLORD',
  JUDICIAL_OFFICER: 'JUDICIAL_OFFICER',
  MEDIATOR: 'MEDIATOR',
  SOCIAL_WORKER: 'SOCIAL_WORKER',
  PREFECTURE: 'PREFECTURE',
  CCAPEX: 'CCAPEX',
  ADMIN: 'ADMIN'
};

exports.CaseStatus = exports.$Enums.CaseStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  MEDIATION: 'MEDIATION',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

exports.ProcedureStage = exports.$Enums.ProcedureStage = {
  UNPAID_REPORT: 'UNPAID_REPORT',
  PAYMENT_COMMAND: 'PAYMENT_COMMAND',
  ASSIGNMENT: 'ASSIGNMENT',
  HEARING: 'HEARING',
  DECISION: 'DECISION',
  EVICTION_COMMAND: 'EVICTION_COMMAND',
  EVICTION: 'EVICTION'
};

exports.UrgencyLevel = exports.$Enums.UrgencyLevel = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  PAYMENT_COMMAND: 'PAYMENT_COMMAND',
  ASSIGNMENT: 'ASSIGNMENT',
  COURT_DECISION: 'COURT_DECISION',
  EVICTION_COMMAND: 'EVICTION_COMMAND',
  PAYMENT_PLAN: 'PAYMENT_PLAN',
  MEDIATION_AGREEMENT: 'MEDIATION_AGREEMENT',
  ID_DOCUMENT: 'ID_DOCUMENT',
  LEASE: 'LEASE',
  INCOME_PROOF: 'INCOME_PROOF',
  OTHER: 'OTHER'
};

exports.MediationStatus = exports.$Enums.MediationStatus = {
  REQUESTED: 'REQUESTED',
  ACCEPTED: 'ACCEPTED',
  IN_PROGRESS: 'IN_PROGRESS',
  AGREEMENT_FOUND: 'AGREEMENT_FOUND',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.MeetingStatus = exports.$Enums.MeetingStatus = {
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  POSTPONED: 'POSTPONED'
};

exports.EventType = exports.$Enums.EventType = {
  CASE_CREATED: 'CASE_CREATED',
  STATUS_CHANGED: 'STATUS_CHANGED',
  STAGE_CHANGED: 'STAGE_CHANGED',
  DOCUMENT_ADDED: 'DOCUMENT_ADDED',
  MEDIATION_REQUESTED: 'MEDIATION_REQUESTED',
  MEDIATION_ACCEPTED: 'MEDIATION_ACCEPTED',
  MEDIATION_COMPLETED: 'MEDIATION_COMPLETED',
  PAYMENT_MADE: 'PAYMENT_MADE',
  PAYMENT_PLAN_CREATED: 'PAYMENT_PLAN_CREATED',
  SOCIAL_WORKER_ASSIGNED: 'SOCIAL_WORKER_ASSIGNED',
  CCAPEX_REVIEW: 'CCAPEX_REVIEW',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  User: 'User',
  Case: 'Case',
  Document: 'Document',
  Notification: 'Notification',
  MediationRequest: 'MediationRequest',
  MediationMeeting: 'MediationMeeting',
  CaseEvent: 'CaseEvent'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
